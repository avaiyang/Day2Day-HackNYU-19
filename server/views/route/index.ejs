<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Waypoints in Directions</title>
    <style>
      #right-panel {
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
      }

      #right-panel select, #right-panel input {
        font-size: 15px;
      }

      #right-panel select {
        width: 100%;
      }

      #right-panel i {
        font-size: 12px;
      }
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
        float: left;
        width: 70%;
        height: 100%;
      }
      #right-panel {
        margin: 20px;
        border-width: 2px;
        width: 20%;
        height: 400px;
        float: left;
        text-align: left;
        padding-top: 0;
      }
      #directions-panel {
        margin-top: 10px;
        background-color: #FFEE77;
        padding: 10px;
        overflow: scroll;
        height: 174px;
      }
    </style>
  </head>
  <body>

    <div id="map"></div>
    <div id="right-panel">
    <div>
    <!-- <b>Start:</b> -->
    <select id="start" style="display:none;">
      <option value="6 MetroTech Center, Brooklyn, NY">Current Location</option>

    </select>
    <!-- <br> -->
    <!-- <b>Waypoints:</b> <br> -->
    <!-- <i>(Ctrl+Click or Cmd+Click for multiple selection)</i> <br> -->
    <select multiple id="waypoints" style="display:none;">
      <option value="Washington Square Park, New York, NY">W4</option>
      <option value="Kimmel Center for University Life, New York, NY">Kimmel</option>
      <option value="6 MetroTech Center, Brooklyn, NY">6 MetroTech Center</option>
      <option value="Pfizer Auditorium, Brooklyn, NY">Pfizer Auditorium</option>
    </select>
    <!-- <br> -->
    <b>Destination</b>
    <select id="end">
      <option value="Washington Square Park, New York, NY">W4</option>
      <option value="Kimmel Center for University Life, New York, NY">Kimmel</option>
      <option value="6 MetroTech Center, Brooklyn, NY">6 MetroTech Center</option>
      <option value="Pfizer Auditorium, Brooklyn, NY">Pfizer Auditorium</option>
      <option value="Palladium Hall, New York, NY">Palladium Hall</option>
    </select>
    <br>
    Get Directions:
      <input type="submit" id="submit" value="Bus">
      <input type="submit" id="submit1" value="Train">
      <input type="submit" id="submit2" value="Walk">
    </div>
    <div id="directions-panel"></div>
    </div>
    <script>
      function initMap() {
        var locations = [
          ['Washington Square Park', 40.7308, -73.9973, 4],
          ['Vinegar Hill, Brooklyn', 40.7037, -73.9823, 5],
          ['Koreatown, Manhattan', 40.7477, -73.9869, 5],
          ['Ocean Hill, Brooklyn', 40.650002, -73.949997, 5],
          ['Union Square, Manhattan', 40.7359, -73.9911, 5],
          ['Brownsville, Brooklyn', 40.6652, -73.9125, 5]
        ];

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            infoWindow.setPosition(pos);
            infoWindow.setContent('Location found.');
            infoWindow.open(map);
            map.setCenter(pos);
          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }

        var myLatLng = {lat: 40.7308, lng: -73.9973};
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 13,
          center: {lat: 40.7308, lng: -73.9973}
        });



        var infowindow = new google.maps.InfoWindow();

        var marker, i;
        var circle = {
            path: google.maps.SymbolPath.CIRCLE,
            fillColor: 'red',
            fillOpacity: .3,
            scale: 20,
            strokeColor: 'white',
            strokeWeight: 1
        };

        for (i = 0; i < locations.length; i++) {
          marker = new google.maps.Marker({
            icon: circle,
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map
          });

          google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
              infowindow.setContent(locations[i][0]);
              infowindow.open(map, marker);
            }
          })(marker, i));
        }




        directionsDisplay.setMap(map);

        document.getElementById('submit').addEventListener('click', function() {
          calculateAndDisplayRoute(directionsService, directionsDisplay);
        });
        document.getElementById('submit1').addEventListener('click', function() {
          calculateAndDisplayRouteTransit(directionsService, directionsDisplay);
        });
        document.getElementById('submit2').addEventListener('click', function() {
          calculateAndDisplayRouteWalking(directionsService, directionsDisplay);
        });
      }

      function calculateAndDisplayRoute(directionsService, directionsDisplay) {
        var waypts = [];
        var checkboxArray = document.getElementById('waypoints');
        for (var i = 0; i < checkboxArray.length; i++) {
          if (checkboxArray.options[i].selected) {
            waypts.push({
              location: checkboxArray[i].value,
              stopover: true
            });
          }
        }

        directionsService.route({
          origin: document.getElementById('start').value,
          destination: document.getElementById('end').value,
          waypoints: waypts,
          optimizeWaypoints: true,
          travelMode: 'DRIVING'
        }, function(response, status) {
          if (status === 'OK') {
            directionsDisplay.setDirections(response);
            var route = response.routes[0];
            var summaryPanel = document.getElementById('directions-panel');
            summaryPanel.innerHTML = '';
            // For each route, display summary information.
            for (var i = 0; i < route.legs.length; i++) {
              var routeSegment = i + 1;
              summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                  '</b><br>';
              summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
              summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
              summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
            }
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }


      function calculateAndDisplayRouteWalking(directionsService, directionsDisplay) {
        var waypts = [];
        var checkboxArray = document.getElementById('waypoints');
        for (var i = 0; i < checkboxArray.length; i++) {
          if (checkboxArray.options[i].selected) {
            waypts.push({
              location: checkboxArray[i].value,
              stopover: true
            });
          }
        }

        directionsService.route({
          origin: document.getElementById('start').value,
          destination: document.getElementById('end').value,
          waypoints: waypts,
          optimizeWaypoints: true,
          travelMode: 'TRANSIT'
        }, function(response, status) {
          if (status === 'OK') {
            directionsDisplay.setDirections(response);
            var route = response.routes[0];
            var summaryPanel = document.getElementById('directions-panel');
            summaryPanel.innerHTML = '';
            // For each route, display summary information.
            for (var i = 0; i < route.legs.length; i++) {
              var routeSegment = i + 1;
              summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                  '</b><br>';
              summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
              summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
              summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
            }
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }

      function calculateAndDisplayRouteTransit(directionsService, directionsDisplay) {
        var waypts = [];
        var checkboxArray = document.getElementById('waypoints');
        for (var i = 0; i < checkboxArray.length; i++) {
          if (checkboxArray.options[i].selected) {
            waypts.push({
              location: checkboxArray[i].value,
              stopover: true
            });
          }
        }

        directionsService.route({
          origin: document.getElementById('start').value,
          destination: document.getElementById('end').value,
          waypoints: waypts,
          optimizeWaypoints: true,
          travelMode: 'WALKING'
        }, function(response, status) {
          if (status === 'OK') {
            directionsDisplay.setDirections(response);
            var route = response.routes[0];
            var summaryPanel = document.getElementById('directions-panel');
            summaryPanel.innerHTML = '';
            // For each route, display summary information.
            for (var i = 0; i < route.legs.length; i++) {
              var routeSegment = i + 1;
              summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                  '</b><br>';
              summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
              summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
              summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
            }
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }
    </script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=enter-your-key&callback=initMap">
    </script>
  </body>
</html>
